{"version":3,"sources":["constants/urls.js","utils/utils.js","components/TeamForm/index.js","components/TeamTable/index.js","components/LayoutWrapper/index.js","components/TeamPage/index.js","components/ContestForm/index.js","utils/validators.js","components/ContestTable/index.js","components/ContestPage/index.js","components/Home/index.js","routers.js","App.js","serviceWorker.js","index.js"],"names":["ROOT_URL","APIUrls","Team","Contest","isEmpty","prop","undefined","hasOwnProperty","length","constructor","Object","keys","msgType","Select","Option","Input","Group","freeze","TeamForm","props","clearForm","state","validation","name","rank","error","setState","onSubmit","e","preventDefault","selectedTeam","createTeam","updateTeam","key","onNameChange","target","value","onStateChange","onRankChange","validateName","required","validateState","disablePastDays","current","moment","endOf","prevProps","prevState","this","clearFlag","setClearFlag","clearStatus","className","type","justify","align","span","onChange","onBlur","onClick","htmlType","Component","TeamTable","teamsInfo","setSelectedTeam","deleteTeam","columns","title","dataIndex","render","substring","text","team","teamsData","map","id","dataSource","Header","Layout","Content","Footer","Sider","LayoutWrapper","WrappedComponent","breakpoint","collapsedWidth","theme","mode","Item","to","style","background","padding","margin","textAlign","React","displayName","getDisplayName","WrappedTeamPage","useState","setTeamsInfo","SUCCESS","statusMsgType","setStatusMsgType","statusMsg","setStatusMsg","fetchTeamsInfo","a","fetch","then","res","ok","json","Error","data","catch","ERROR","toString","useEffect","emailOfCreator","dateOfCreation","description","method","body","JSON","stringify","headers","statusClassName","console","log","ContestForm","capacity","registration_from","registration_to","editable","selectedContest","createContest","updateContest","onCapacityChange","onDateOfCreationChange","onDateOfCreationChange2","onTypeChange","onEditableChange","validateEmailOfCreator","test","String","toLowerCase","validateType","disabledDate","ContestTable","ContestsInfo","setSelectedContest","deleteContest","ContestsData","WrappedContestPage","setContestsInfo","fetchContestsInfo","WrappedHome","RouterConfig","exact","path","component","Home","TeamPage","ContestPage","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b901be9.chunk.js","sourcesContent":["const ROOT_URL = \"https://icpc-backend-m29.herokuapp.com/\";\n\nexport const APIUrls = {\n    Team: `${ROOT_URL}teams/`,\n    Contest: `${ROOT_URL}contest/`,\n}\n","export const isNumber = (text) => {\n    return !isNaN(parseInt(text)) && isFinite(text);\n}\n\nexport const isEmpty = prop =>\n    prop === null ||\n    prop === undefined ||\n    (prop.hasOwnProperty(\"length\") && prop.length === 0) ||\n    (prop.constructor === Object && Object.keys(prop).length === 0);","import React, { Component, Fragment } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport {\n    Input,\n    Select,\n    Row,\n    Col,\n    Button,\n    DatePicker,\n} from 'antd';\n// import {validateState} from \"../../utils/validators\";\nimport moment from \"moment\";\nimport { isEmpty, isNumber } from \"../../utils/utils\";\n\nconst { Option } = Select;\nconst InputGroup = Input.Group;\n\n\nexport const msgType = Object.freeze({ 'SUCCESS': 'Success', 'ERROR': 'error' });\n\n/**\n * Class component for displaying form, handling validation of input and triggering submission.\n */\nexport class TeamForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            rank: \"\",\n            state: \"\",\n            validation: {\n                name: {\n                    required: true,\n                    error: \"\"\n                },\n                rank: {\n                    required: false,\n                    error: \"\"\n                },\n                state: {\n                    required: true,\n                    error: \"\"\n                }\n            },\n        }\n    }\n\n    // This function is invoked during an update.\n    // Set conditions so the update does not go on loop\n    onUpdate(prevProps, prevState) {\n        const { clearFlag, setClearFlag, selectedTeam } = this.props;\n        //checking whether to clear fields or not\n        if ((clearFlag !== prevProps.clearFlag) &&\n            clearFlag) {\n            this.clearForm();\n            setClearFlag(false);\n        }\n\n        if (!isEmpty(selectedTeam) && (prevProps.selectedTeam.key !== selectedTeam.key)) {\n            let { validation } = this.state;\n            validation.name.error = \"\";\n            validation.state.error = \"\";\n            validation.rank.error = \"\";\n\n            this.setState({\n                name: selectedTeam.name,\n                state: selectedTeam.state,\n                rank: selectedTeam.rank,\n                validation: validation,\n            })\n        }\n    }\n\n    clearForm = () => {\n        let {\n            name, state, rank, validation\n        } = this.state;\n        name = \"\";\n        state = \"\";\n        rank = \"\";\n        validation.name.error = \"\";\n        validation.state.error = \"\";\n        validation.rank.error = \"\";\n        this.setState({\n            name, state, rank, validation\n        });\n    };\n\n    // checks if there are validation errors and then calls the create or update accordingly.\n    onSubmit = e => {\n        e.preventDefault();\n        const { name, state, rank, validation } = this.state;\n        const { selectedTeam, createTeam, updateTeam } = this.props;\n        if (!(validation.name.error || validation.rank.error || validation.state.error)) {\n            if (isEmpty(selectedTeam)) {\n                createTeam(\n                    name, state, rank\n                );\n            } else {\n                updateTeam(\n                    selectedTeam.key, name, state, rank\n                );\n            }\n        }\n    };\n\n    onNameChange = e => {\n        this.setState({ name: e.target.value });\n    };\n\n    onStateChange = e => {\n        this.setState({ state: e.target.value });\n    };\n\n    onRankChange = e => {\n        this.setState({ rank: e.target.value });\n    };\n\n    // onStateChange = e => {\n    //     this.setState({ state: e.target.value });\n    // };\n\n    // onTypeChange = e => {\n    //     this.setState({ type: e.target.value });\n    // };\n\n    // onDescriptionChange = e => {\n    //     this.setState({ description: e.target.value });\n    // };\n\n    validateName = () => {\n        let { validation } = this.state;\n        if (validation.name.required && this.state.name === \"\") {\n            validation.name.error = \"This field is required\";\n        } else {\n            validation.name.error = \"\";\n        }\n        this.setState({ validation: validation });\n    };\n\n    validateState = () => {\n        let { validation } = this.state;\n\n        this.setState({ validation: validation });\n    };\n\n    // validateType = () => {\n    //     let { validation } = this.state;\n    //     if (validation.type.required && this.state.type === \"\") {\n    //         validation.type.error = \"This field is required.\";\n    //     } else {\n    //         validation.type.error = \"\"\n    //     }\n    //     this.setState({ validation: validation });\n    // };\n\n    disablePastDays = current => {\n        return current && current <= moment().endOf('day');\n    };\n\n    render() {\n        const { selectedTeam, clearStatus } = this.props;\n\n        return (\n            <Fragment>\n                <form>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\" align=\"middle\">\n                            <Col span={3}>\n                                <label className=\"required-field\">Name</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.name}\n                                    onChange={this.onNameChange}\n                                    onBlur={this.validateName}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.name.error &&\n                                    <div className=\"input-error\">{this.state.validation.name.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label className=\"required-field\">State</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.state}\n                                    onChange={this.onStateChange}\n                                    // onBlur={this.validateState}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.state.error &&\n                                    <div className=\"input-error\">{this.state.validation.state.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label>Rank</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.rank}\n                                    onChange={this.onRankChange}\n                                    // onBlur={this.validateState}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.rank.error &&\n                                    <div className=\"input-error\">{this.state.validation.rank.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <Button type=\"primary\" htmlType=\"submit\" onClick={this.onSubmit}>\n                        {isEmpty(selectedTeam) ? \"Create\" : \"Update\"}\n                    </Button>\n                </form>\n            </Fragment>\n        );\n    }\n}\n\nTeamForm.propTypes = {\n    createTeam: PropTypes.func.isRequired,\n    fetchTeamsInfo: PropTypes.func.isRequired,\n    updateTeam: PropTypes.func.isRequired,\n    clearFlag: PropTypes.bool.isRequired,\n    setClearFlag: PropTypes.func.isRequired,\n    selectedTeam: PropTypes.object.isRequired,\n    clearStatus: PropTypes.func.isRequired\n};\n\nexport default TeamForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Divider, Table} from 'antd';\nimport {isEmpty} from \"../../utils/utils\";\n\nfunction TeamTable(props) {\n    const {teamsInfo, setSelectedTeam, deleteTeam} = props;\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: name => <div>{name}</div>\n        },\n        {\n            title: 'Rank',\n            dataIndex: 'rank',\n            key: 'rank',\n            render: rank => <div>{rank}</div>\n        },\n        {\n            title: 'State',\n            dataIndex: 'state',\n            key: 'state',\n            render: state => <div>{isEmpty(state) ? \"-\" : state.substring(0, 10)}</div>\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (text, team) => (\n                <span>\n                        <a onClick={() => setSelectedTeam(team)}>Edit</a>\n                        <Divider type=\"vertical\"/>\n                        <a onClick={() => deleteTeam(team.key)}>Delete</a>\n                    </span>\n            )\n        },\n    ];\n    const teamsData = teamsInfo.map(team => {\n        return ({\n            key: team.id,\n            name: team.name,\n            rank: team.rank,\n            state: team.state,\n        })\n    });\n    return (\n        <Table columns={columns} dataSource={teamsData}/>\n    )\n}\n\nTeamTable.propTypes = {\n    teamsInfo: PropTypes.array.isRequired,\n    setSelectedTeam: PropTypes.func.isRequired,\n    deleteTeam: PropTypes.func.isRequired\n};\n\nexport default TeamTable;","import React from 'react';\nimport {Icon, Layout, Menu} from \"antd\";\nimport 'antd/dist/antd.css';\nimport {Link} from \"react-router-dom\";\n\nconst {Header, Content, Footer, Sider} = Layout;\n\n// An example of High Order Component(HOC) whose responsibility\n// is to wrap any component given to it and return the new resulting\n// component.\nconst LayoutWrapper = (WrappedComponent) => {\n     class LayoutWrapper extends React.Component {\n        render() {\n            return (\n                <Layout>\n                    <Sider\n                        breakpoint=\"lg\"\n                        collapsedWidth=\"0\">\n\n                        <div className=\"logo slider-header\">React App</div>\n                        <Menu theme=\"dark\" mode=\"inline\">\n                            <Menu.Item key=\"1\">\n                                <Link to=\"/\" >\n                                    <Icon type=\"home\"/>\n                                    <span className=\"nav-text\">Home</span>\n                                </Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"2\">\n                                <Link to=\"/creation\" >\n                                    <Icon type=\"form\"/>\n                                    <span className=\"nav-text\">Team</span>\n                                </Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"3\">\n                                <Link to=\"/contest\" >\n                                    <Icon type=\"form\"/>\n                                    <span className=\"nav-text\">Contest</span>\n                                </Link>\n                            </Menu.Item>\n                        </Menu>\n                    </Sider>\n                    <Layout>\n                        <Header className=\"header\" style={{background: '#e6f7ff', padding: 0}}>\n                            <span>Assignment on React</span>\n                        </Header>\n                        <Content className=\"content\" style={{margin: '24px 16px 0'}}>\n                            <WrappedComponent {...this.props}/>\n                        </Content>\n                        <Footer className=\"footer\" style={{textAlign: 'center'}}>React CRUD example</Footer>\n                    </Layout>\n                </Layout>\n            );\n        }\n    }\n    LayoutWrapper.displayName = `LayoutWrapper(${getDisplayName(WrappedComponent)})`;\n     return LayoutWrapper;\n};\n\nfunction getDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default LayoutWrapper;","import React, {Fragment, useEffect, useState} from 'react';\nimport {APIUrls} from \"../../constants/urls\";\nimport TeamForm, {msgType} from \"../TeamForm\";\nimport TeamTable from \"../TeamTable\";\nimport LayoutWrapper from \"../LayoutWrapper\";\n\nexport function TeamPage() {\n\n    const [teamsInfo, setTeamsInfo] = useState([]);\n    const [selectedTeam, setSelectedTeam] = useState({});\n    const [statusMsgType, setStatusMsgType] = useState(msgType.SUCCESS);\n    const [statusMsg, setStatusMsg] = useState(\"\");\n    const [clearFlag, setClearFlag] = useState(false);\n\n    const fetchTeamsInfo = async () => {\n        await fetch(`${APIUrls.Team}`)\n            .then(res => {\n                if (res.ok){\n                    return res.json();\n                } else {\n                    throw new Error(\"Error while fetching team details\");\n                }\n            })\n            .then(data => {\n                setTeamsInfo(data);\n                setStatusMsgType(msgType.SUCCESS);\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    //Is equivalent to class component's componentDidMount,\n    // componentDidUpdate and componentWillUnmount lifecycle\n    // use of the second argument tells it to run only when it mounts\n    // if something is provided in second argument then it\n    // runs only when the provided value changes\n    useEffect(() => {\n        fetchTeamsInfo();\n    }, []);\n\n    //REST API call\n    const createTeam = (name, emailOfCreator, dateOfCreation, type, description) => {\n        let data = {\n            method: 'POST',\n            body: JSON.stringify({\n                'name': name,\n                'emailOfCreator': emailOfCreator,\n                'dateOfCreation': dateOfCreation,\n                'type': type,\n                'description': description,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        };\n        fetch(APIUrls.Team, data)\n            .then(res => {\n                if (res.ok) {\n                 return res.json();\n                } else {\n                    throw new Error(\"EmailOfCreator must be unique.\")\n                }\n            })\n            .then(data => {\n                fetchTeamsInfo();\n                setClearFlag(true);\n                setStatusMsgType(msgType.SUCCESS);\n                setStatusMsg(\"Saved successfully\");\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                console.log(error);\n                setStatusMsg( error.toString());\n            });\n    };\n\n    const updateTeam = async (id, name, emailOfCreator, dateOfCreation, type, description) => {\n        let data = {\n            method: 'PUT',\n            body: JSON.stringify({\n                'id': id,\n                'name': name,\n                'emailOfCreator': emailOfCreator,\n                'dateOfCreation': dateOfCreation,\n                'type': type,\n                'description': description,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        };\n        fetch(APIUrls.Team, data)\n            .then(res => {\n            if (res.ok) {\n                return res.json();\n            } else {\n                throw new Error(\"\\\"Email of Creator must be unique.\\\"\");\n            }\n            })\n            .then(data => {\n                fetchTeamsInfo();\n                setClearFlag(true);\n                setStatusMsgType(msgType.SUCCESS);\n                setSelectedTeam({});\n                setStatusMsg(\"Updated successfully\");\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    const deleteTeam = (id) => {\n        let fetchData = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`${APIUrls.Team}delete/${id}`, fetchData)\n            .then(res => {\n                if (res.ok) {\n                fetchTeamsInfo();\n                } else {\n                    throw new Error(\"Error while deleting team.\");\n                }\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    const clearStatus = () => {\n        setStatusMsgType(msgType.SUCCESS);\n        setStatusMsg(\"\");\n    };\n\n    const statusClassName = statusMsgType === msgType.ERROR?'error-status': 'success-status';\n\n    //Fragment allows to group a list of children without adding extra nodes to the DOM\n    return (\n        <Fragment>\n            <TeamForm\n                createTeam={createTeam}\n                fetchTeamsInfo={fetchTeamsInfo}\n                updateTeam={updateTeam}\n                clearFlag={clearFlag}\n                setClearFlag={setClearFlag}\n                selectedTeam={selectedTeam}\n                clearStatus={clearStatus}\n            />\n            {statusMsg && <div className={statusClassName}>{statusMsg}</div>}\n            <TeamTable\n                teamsInfo={teamsInfo}\n                setSelectedTeam={setSelectedTeam}\n                deleteTeam={deleteTeam}\n            />\n        </Fragment>\n    )\n}\n\nconst WrappedTeamPage = LayoutWrapper(TeamPage);\nexport default WrappedTeamPage;","import React, { Component, Fragment } from \"react\";\nimport PropTypes from 'prop-types';\n\nimport {\n    Input,\n    Select,\n    Row,\n    Col,\n    Button,\n    DatePicker,\n} from 'antd';\nimport {\n    validateEmailOfCreator\n} from \"../../utils/validators\";\nimport moment from \"moment\";\nimport { isEmpty, isNumber } from \"../../utils/utils\";\n\nconst { Option } = Select;\nconst InputGroup = Input.Group;\n\n\nexport const msgType = Object.freeze({ 'SUCCESS': 'Success', 'ERROR': 'error' });\n\n/**\n * Class component for displaying form, handling validation of input and triggering submission.\n */\nexport class ContestForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            capacity: \"\",\n            registration_from: \"\",\n            registration_to: \"\",\n            editable: \"\",\n            validation: {\n                name: {\n                    required: true,\n                    error: \"\"\n                },\n                capacity: {\n                    required: true,\n                    error: \"\"\n                },\n                registration_from: {\n                    required: true,\n                    error: \"\"\n                },\n                registration_to: {\n                    required: true,\n                    error: \"\"\n                },\n                editable: {\n                    required: false,\n                    error: \"\"\n                }\n            },\n        }\n    }\n\n    // This function is invoked during an update.\n    // Set conditions so the update does not go on loop\n    onUpdate(prevProps, prevState) {\n        const { clearFlag, setClearFlag, selectedContest } = this.props;\n        //checking whether to clear fields or not\n        if ((clearFlag !== prevProps.clearFlag) &&\n            clearFlag) {\n            this.clearForm();\n            setClearFlag(false);\n        }\n\n        if (!isEmpty(selectedContest) && (prevProps.selectedContest.key !== selectedContest.key)) {\n            let { validation } = this.state;\n            validation.name.error = \"\";\n            validation.capacity.error = \"\";\n            validation.registration_from.error = \"\";\n            validation.registration_to.error = \"\";\n            validation.editable.error = \"\";\n            this.setState({\n                name: selectedContest.name,\n                capacity: selectedContest.capacity,\n                registration_from: selectedContest.registration_from,\n                registration_to: selectedContest.registration_to,\n                editable: selectedContest.editable,\n                validation: validation,\n            })\n        }\n    }\n\n    clearForm = () => {\n        let {\n            name, capacity, registration_from, registration_to, editable, validation\n        } = this.state;\n        name = \"\";\n        capacity = \"\";\n        registration_from = \"\";\n        registration_to = \"\";\n        editable = \"\";\n        validation.name.error = \"\";\n        validation.capacity.error = \"\";\n        validation.registration_from.error = \"\";\n        validation.registration_to.error = \"\";\n        validation.editable.error = \"\";\n        this.setState({\n            name, capacity, registration_from, registration_to, editable, validation\n        });\n    };\n\n    // checks if there are validation errors and then calls the create or update accordingly.\n    onSubmit = e => {\n        e.preventDefault();\n        const { name, capacity, registration_from, registration_to, editable, validation } = this.state;\n        const { selectedContest, createContest, updateContest } = this.props;\n        if (!(validation.name.error || validation.registration_from.error || validation.capacity.error\n            || validation.registration_to.error || validation.editable.error)) {\n            if (isEmpty(selectedContest)) {\n                createContest(\n                    name, capacity, registration_from, registration_to, editable\n                );\n            } else {\n                updateContest(\n                    selectedContest.key, name, capacity, registration_from, registration_to, editable\n                );\n            }\n        }\n    };\n\n    onNameChange = e => {\n        this.setState({ name: e.target.value });\n    };\n\n    onCapacityChange = e => {\n        this.setState({ capacity: e.target.value });\n    };\n\n    onDateOfCreationChange = value => {\n        this.setState({ registration_from: value });\n    };\n\n    onDateOfCreationChange2 = value => {\n        this.setState({ registration_to: value });\n    };\n\n    onTypeChange = e => {\n        this.setState({ registration_to: e.target.value });\n    };\n\n    onEditableChange = e => {\n        this.setState({ editable: e.target.value });\n    };\n\n    validateName = () => {\n        let { validation } = this.state;\n        if (validation.name.required && this.state.name === \"\") {\n            validation.name.error = \"This field is required\";\n        } else {\n            validation.name.error = \"\";\n        }\n        this.setState({ validation: validation });\n    };\n\n    validateEmailOfCreator\n        = () => {\n            let { validation } = this.state;\n            if (this.state.capacity !== \"\") {\n                if (!validateEmailOfCreator\n                    (this.state.capacity)) {\n                    validation.capacity.error = \"This field is not valid email.\";\n                } else {\n                    validation.capacity.error = \"\";\n                }\n                this.setState({ validation: validation });\n            } else {\n                if (validation.capacity.required) {\n                    validation.capacity.error = \"This field is required.\";\n                    this.setState({ validation: validation });\n                }\n            }\n        };\n\n    validateType = () => {\n        let { validation } = this.state;\n        if (validation.registration_to.required && this.state.registration_to === \"\") {\n            validation.registration_to.error = \"This field is required.\";\n        } else {\n            validation.registration_to.error = \"\"\n        }\n        this.setState({ validation: validation });\n    };\n\n    disablePastDays = current => {\n        return current && current <= moment().endOf('day');\n    };\n\n    render() {\n        const { selectedContest, clearStatus } = this.props;\n\n        return (\n            <Fragment>\n                <form>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\" align=\"middle\">\n                            <Col span={3}>\n                                <label className=\"required-field\">Contest Name</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.name}\n                                    onChange={this.onNameChange}\n                                    onBlur={this.validateName}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.name.error &&\n                                    <div className=\"input-error\">{this.state.validation.name.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label className=\"required-field\">Capacity</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.capacity}\n                                    onChange={this.onCapacityChange}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.capacity.error &&\n                                    <div className=\"input-error\">{this.state.validation.capacity.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label>Registration From</label>\n                            </Col>\n                            <div className={{ \"display\": \"flex\" }} onClick={clearStatus}>\n                                <DatePicker\n                                    style={{ \"display\": \"flex\" }}\n                                    value={this.state.registration_from ? moment(this.state.registration_from) : null}\n                                    onChange={this.onDateOfCreationChange}\n                                    disabledDate={this.disablePastDays}\n                                />\n                            </div>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label className=\"required-field\">Registration To</label>\n                            </Col>\n                            <div className={{ \"display\": \"flex\" }} onClick={clearStatus}>\n                                <DatePicker\n                                    style={{ \"display\": \"flex\" }}\n                                    value={this.state.registration_to ? moment(this.state.registration_to) : null}\n                                    onChange={this.onDateOfCreationChange2}\n                                    disabledDate={this.disablePastDays}\n                                />\n                            </div>\n                        </Row>\n                    </div>\n                    <div className=\"form-row\">\n                        <Row type=\"flex\" justify=\"start\">\n                            <Col span={3}>\n                                <label>Editable</label>\n                            </Col>\n                            <Col span={8}>\n                                <Input\n                                    value={this.state.editable}\n                                    onChange={this.onEditableChange}\n                                    onClick={clearStatus}\n                                />\n                                {this.state.validation.editable.error &&\n                                    <div className=\"input-error\">{this.state.validation.editable.error}</div>}\n                            </Col>\n                        </Row>\n                    </div>\n                    <Button registration_to=\"primary\" htmlType=\"submit\" onClick={this.onSubmit}>\n                        {isEmpty(selectedContest) ? \"Create\" : \"Update\"}\n                    </Button>\n                </form>\n            </Fragment>\n        );\n    }\n}\n\nContestForm.propTypes = {\n    createContest: PropTypes.func.isRequired,\n    fetchContestsInfo: PropTypes.func.isRequired,\n    updateContest: PropTypes.func.isRequired,\n    clearFlag: PropTypes.bool.isRequired,\n    setClearFlag: PropTypes.func.isRequired,\n    selectedContest: PropTypes.object.isRequired,\n    clearStatus: PropTypes.func.isRequired\n};\n\nexport default ContestForm;","export const validateEmailOfCreator = (emailOfCreator) => {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(emailOfCreator).toLowerCase());\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Divider, Table} from 'antd';\nimport {isEmpty} from \"../../utils/utils\";\n\nfunction ContestTable(props) {\n    const {ContestsInfo, setSelectedContest, deleteContest} = props;\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: name => <div>{name}</div>\n        },\n        {\n            title: 'Capacity',\n            dataIndex: 'capacity',\n            key: 'capacity',\n            render: capacity => <div>{capacity}</div>\n        },\n        {\n            title: 'Registration From',\n            dataIndex: 'registration_from',\n            key: 'registration_from',\n            render: registration_from => <div>{isEmpty(registration_from) ? \"-\" : registration_from.substring(0, 10)}</div>\n        },\n        {\n            title: 'Registration To',\n            dataIndex: 'registration_to',\n            key: 'registration_to',\n            render: registration_to => <div>{isEmpty(registration_to) ? \"-\" : registration_to.substring(0, 10)}</div>\n        },\n        {\n            title: 'Editable',\n            dataIndex: 'editable',\n            key: 'editable',\n            render: editable => <div>{editable}</div>\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (text, Contest) => (\n                <span>\n                        <a onClick={() => setSelectedContest(Contest)}>Edit</a>\n                        <Divider type=\"vertical\"/>\n                        <a onClick={() => deleteContest(Contest.key)}>Delete</a>\n                    </span>\n            )\n        },\n    ];\n    const ContestsData = ContestsInfo.map(Contest => {\n        return ({\n            key: Contest.id,\n            name: Contest.name,\n            capacity: Contest.capacity,\n            registration_from: Contest.registration_from,\n            registration_to: Contest.registration_to,\n            editable: Contest.editable,\n        })\n    });\n    return (\n        <Table columns={columns} dataSource={ContestsData}/>\n    )\n}\n\nContestTable.propTypes = {\n    ContestsInfo: PropTypes.array.isRequired,\n    setSelectedContest: PropTypes.func.isRequired,\n    deleteContest: PropTypes.func.isRequired\n};\n\nexport default ContestTable;","import React, { Fragment, useEffect, useState } from 'react';\nimport { APIUrls } from \"../../constants/urls\";\nimport ContestForm, { msgType } from \"../ContestForm\";\nimport ContestTable from \"../ContestTable\";\nimport LayoutWrapper from \"../LayoutWrapper\";\n\nexport function ContestPage() {\n\n    const [ContestsInfo, setContestsInfo] = useState([]);\n    const [selectedContest, setSelectedContest] = useState({});\n    const [statusMsgType, setStatusMsgType] = useState(msgType.SUCCESS);\n    const [statusMsg, setStatusMsg] = useState(\"\");\n    const [clearFlag, setClearFlag] = useState(false);\n\n    const fetchContestsInfo = async () => {\n        await fetch(`${APIUrls.Contest}`)\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw new Error(\"Error while fetching Contest details\");\n                }\n            })\n            .then(data => {\n                setContestsInfo(data);\n                setStatusMsgType(msgType.SUCCESS);\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    //Is equivalent to class component's componentDidMount,\n    // componentDidUpdate and componentWillUnmount lifecycle\n    // use of the second argument tells it to run only when it mounts\n    // if something is provided in second argument then it\n    // runs only when the provided value changes\n    useEffect(() => {\n        fetchContestsInfo();\n    }, []);\n\n    //REST API call\n    const createContest = (name, capacity, registration_from, registration_to, editable) => {\n        let data = {\n            method: 'POST',\n            body: JSON.stringify({\n                'name': name,\n                'capacity': capacity,\n                'registration_from': registration_from,\n                'registration_to': registration_to,\n                'editable': editable,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        };\n        fetch(APIUrls.Contest, data)\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw new Error(\"capacity must be unique.\")\n                }\n            })\n            .then(data => {\n                fetchContestsInfo();\n                setClearFlag(true);\n                setStatusMsgType(msgType.SUCCESS);\n                setStatusMsg(\"Saved successfully\");\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                console.log(error);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    const updateContest = async (id, name, capacity, registration_from, registration_to, editable) => {\n        let data = {\n            method: 'PUT',\n            body: JSON.stringify({\n                'id': id,\n                'name': name,\n                'capacity': capacity,\n                'registration_from': registration_from,\n                'registration_to': registration_to,\n                'editable': editable,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        };\n        fetch(APIUrls.Contest, data)\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw new Error(\"\\\"Found error.\\\"\");\n                }\n            })\n            .then(data => {\n                fetchContestsInfo();\n                setClearFlag(true);\n                setStatusMsgType(msgType.SUCCESS);\n                setSelectedContest({});\n                setStatusMsg(\"Updated successfully\");\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    const deleteContest = (id) => {\n        let fetchData = {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        fetch(`${APIUrls.Contest}delete/${id}`, fetchData)\n            .then(res => {\n                if (res.ok) {\n                    fetchContestsInfo();\n                } else {\n                    throw new Error(\"Error while deleting Contest.\");\n                }\n            })\n            .catch(error => {\n                setStatusMsgType(msgType.ERROR);\n                setStatusMsg(error.toString());\n            });\n    };\n\n    const clearStatus = () => {\n        setStatusMsgType(msgType.SUCCESS);\n        setStatusMsg(\"\");\n    };\n\n    const statusClassName = statusMsgType === msgType.ERROR ? 'error-status' : 'success-status';\n\n    //Fragment allows to group a list of children without adding extra nodes to the DOM\n    return (\n        <Fragment>\n            <ContestForm\n                createContest={createContest}\n                fetchContestsInfo={fetchContestsInfo}\n                updateContest={updateContest}\n                clearFlag={clearFlag}\n                setClearFlag={setClearFlag}\n                selectedContest={selectedContest}\n                clearStatus={clearStatus}\n            />\n            {statusMsg && <div className={statusClassName}>{statusMsg}</div>}\n            <ContestTable\n                ContestsInfo={ContestsInfo}\n                setSelectedContest={setSelectedContest}\n                deleteContest={deleteContest}\n            />\n        </Fragment>\n    )\n}\n\nconst WrappedContestPage = LayoutWrapper(ContestPage);\nexport default WrappedContestPage;","import React from \"react\";\n\nimport LayoutWrapper from \"../LayoutWrapper\";\n// import logo from '../../team-logo.png';\n\nexport function Home() {\n    return (\n        <div className=\"body-content\">\n            <div>REACT CRUD Assignment</div>\n            {/* <img src={logo} className=\"team-logo\" alt=\"logo\" /> */}\n            <p>\n                CRUD example of Contest and Teams\n            </p>\n            {/*<a*/}\n            {/*    className=\"App-link\"*/}\n            {/*    href=\"https://reactjs.org\"*/}\n            {/*    target=\"_blank\"*/}\n            {/*    rel=\"noopener noreferrer\"*/}\n            {/*>*/}\n            {/*    Learn React*/}\n            {/*</a>*/}\n        </div>\n    )\n}\n\nconst WrappedHome = LayoutWrapper(Home);\nexport default WrappedHome;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\n// import { ContestPage } from './components/ContestPage';\nimport TeamPage from \"./components/TeamPage\";\nimport ContestPage from \"./components/ContestPage\";\nimport Home from \"./components/Home\";\n\nexport default function RouterConfig() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" key={1} component={Home}/>\n                <Route exact path=\"/creation\" key={2} component={TeamPage} />\n                <Route exact path=\"/contest\" key={3} component={ContestPage} />\n            </Switch>\n        </BrowserRouter>\n    );\n} \n","import React from 'react';\nimport './App.css';\nimport './static/css/main.css'\nimport RouterConfig from \"./routers\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RouterConfig/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}